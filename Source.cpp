/*

	Name: Example Exploit
	Use: A dll that is injected into RobloxPlayerBeta.exe to exploit the lua aspects of the game allowing replication of certain things to the server
	Author: Maria Naruse#2695

*/

//----------------------------------------------------------------------------------------------------------\\
// Includes

#include <string>

#include "RobloxLua.h"
#include "Memory.h"

//----------------------------------------------------------------------------------------------------------\\
// Namespace

using namespace std;

//----------------------------------------------------------------------------------------------------------\\
// Main function

void main()
{
	Console("Example Exploit");

	ScriptContext = scan((BYTE*)&Ex_ScriptContextAddress, (BYTE*)"xxxx", PAGE_READWRITE); // Scan ScriptContext
	RobloxLuaState = *(DWORD*)(ScriptContext + 164) - (ScriptContext + 164); // Scan LuaState
	
	cout << "ScriptContext: " << ScriptContext << endl;
	cout << "RobloxState: " << RobloxLuaState << endl;

	string In;

	while (true) {

		cout << "> ";

		getline(cin, In); // Get input from user and store it in string In

		if (In == "print")
		{
			string PrintLine;
			cout << "Enter Text: ";
			getline(cin, PrintLine); // Get input from user and store it in string PrintLine

			lua_getfield(RobloxLuaState, -10002, "print"); // get global print
			lua_pushstring(RobloxLuaState, PrintLine.c_str()); // push text to print onto stack
			lua_pcall(RobloxLuaState, 1, 0, 0); // call function with 1 argument (text we are printing)
		}

		else if (In == "warn")
		{
			string PrintLine;
			cout << "Enter Text: ";
			getline(cin, PrintLine); // Get input from user and store it in string PrintLine

			lua_getfield(RobloxLuaState, -10002, "warn"); // get global warn
			lua_pushstring(RobloxLuaState, PrintLine.c_str()); // push text to print onto stack
			lua_pcall(RobloxLuaState, 1, 0, 0); // call function with 1 argument (text we are printing)
		}

	}
}

//----------------------------------------------------------------------------------------------------------\\
// Entry Point

/*
	DllMain is a common element of .dll files that lets it know where to start code execution
*/

BOOL APIENTRY DllMain(HMODULE Module, DWORD Reason, void* Reserved)
{
	switch (Reason)
	{
	case DLL_PROCESS_ATTACH:
		DisableThreadLibraryCalls(Module); // Disable notifications for attach and detach
		CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)main, NULL, NULL, NULL); // Create our main thread
		break;
	case DLL_PROCESS_DETACH:
		// This is called when we close roblox but we wont be doing anything with it
		break;
	default:
		MessageBox(NULL, "Their was an error!", "Error!", MB_OK); // a big oopsie happened so this is our simple af error handling to tell us something happened
		break;
	}

	return TRUE;
}
