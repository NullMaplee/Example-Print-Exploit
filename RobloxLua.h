//----------------------------------------------------------------------------------------------------------\\
// Includes

#include "Utility.h"

//----------------------------------------------------------------------------------------------------------\\
// LuaState And ScriptContext

int RobloxLuaState;
int ScriptContext;

//----------------------------------------------------------------------------------------------------------\\
// Address and Calling Convection Definition and jb address

DWORD Ex_ScriptContextAddress = ASLR(0x1A4137C);
DWORD Ex_Getfield = ASLR(0x11CE870);
DWORD Ex_Pushstring = ASLR(0x11CF470);
DWORD Ex_PCall = ASLR(0x11CF040);

DWORD GetfieldJB = 0x11CE8F9;
DWORD PushstringJB = 0x11CF53A;
DWORD PCallJB = 0x11CF0E3;

#define GetfieldCallConv __fastcall
#define PushstringCallConv __stdcall
#define PCallCallConv __cdecl

//----------------------------------------------------------------------------------------------------------\\
// Lua Address Definition

typedef void(GetfieldCallConv* rlua_getfield)(int L, int idx, const char* k);
rlua_getfield Getfield = (rlua_getfield)Ex_Getfield;

typedef void(PushstringCallConv* rlua_pushstring)(int L, const char* s);
rlua_pushstring Pushstring = (rlua_pushstring)Ex_Pushstring;

typedef int(PCallCallConv* rlua_pcall)(int L, int nargs, int nresults, int errfunc);
rlua_pcall PCall = (rlua_pcall)Ex_PCall;

//----------------------------------------------------------------------------------------------------------\\
// Lua Function Definition

/*
	The reason we make a seperate function for our lua addresses is because we must bypass retcheck which will crash our game
	if it is triggered, it is a simple matter to do so we just replace a instruction -> execute our lua address -> restore instruction
	the reason we restore the instruction is if memcheck catches us modifying anything it will crash us as well, so we restore it before
	memcheck can catch it
*/

void lua_getfield(int L, int idx, const char* k)
{
	SetJump((int*)ASLR(GetfieldJB)); // Bypass Retcheck
	Getfield(L, idx, k);
	RestoreJump((int*)ASLR(GetfieldJB)); // Restore Retcheck
}

void lua_pushstring(int L, const char* s)
{
	SetJump((int*)ASLR(PushstringJB)); // Bypass Retcheck
	Pushstring(L, s);
	RestoreJump((int*)ASLR(PushstringJB)); // Restore Retcheck
}

void lua_pcall(int L, int nargs, int nresults, int errfunc)
{
	SetJump((int*)ASLR(PCallJB)); // Bypass Retcheck
	PCall(L, nargs, nresults, errfunc);
	RestoreJump((int*)ASLR(PCallJB)); // Restore Retcheck
}
