//----------------------------------------------------------------------------------------------------------\\
// Includes

#include <windows.h>
#include <iostream>

//----------------------------------------------------------------------------------------------------------\\
// ASLR Function

/*
	ASLR stands for address space randomization layout and is an anti-exploitation technique that is used
	it can be easily bypassed by subtracting the base from the address and adding the module handle
	a good demo of aslr is seen here: https://www.youtube.com/watch?v=9nq0RHfrAi4
*/

int ASLR(DWORD Address) {
	return Address - 0x400000 + (DWORD)GetModuleHandle("RobloxPlayerBeta.exe");
}

//----------------------------------------------------------------------------------------------------------\\
// Console

/*
	Roblox has an anti-console measure they take to prevent us from making a console, it is very easy to bypass we just need to place a ret
	instruction in FreeConsole to bypass it
*/

void Console(LPCSTR Name)
{
	// Bypass Roblox's anti-console
	DWORD Old = 0;
	VirtualProtect(FreeConsole, 1, PAGE_EXECUTE_READWRITE, &Old); // Change protection of FreeConsole to ReadWrite
	*(uintptr_t*)FreeConsole = 0xC3; // ret

	// Allocate our console
	AllocConsole();

	// Open out streams
	freopen("CONOUT$", "w", stdout); // Open output stream to the console
	freopen("CONIN$", "r", stdin); // Open input stream from the console

	SetWindowLong(
		GetConsoleWindow(),
		GWL_STYLE, WS_CAPTION | WS_MINIMIZEBOX | WS_SYSMENU
	);

	SetWindowPos(
		GetConsoleWindow(),
		HWND_TOPMOST,
		0, 0, // X and Y
		0, 0,  // uX and uY
		SWP_DRAWFRAME | SWP_NOSIZE | SWP_SHOWWINDOW // Flags
	);

	SetConsoleTitleA(Name);
}

//----------------------------------------------------------------------------------------------------------\\
// Place JMP and Resture JB Functions (used for retcheck bypass)

void SetJump(LPVOID Address)
{
	DWORD OldProtection;

	VirtualProtect(Address, 5, PAGE_EXECUTE_READWRITE, &OldProtection); // Change Protection
	*(char*)Address = 0xEB; // Place JMP
	VirtualProtect(Address, 5, OldProtection, &OldProtection); // Restore Protection
}

void RestoreJump(LPVOID Address)
{
	DWORD OldProtection;

	VirtualProtect(Address, 5, PAGE_EXECUTE_READWRITE, &OldProtection); // Change Protectio
	*(char*)Address = 0x72; // Place JB
	VirtualProtect(Address, 5, OldProtection, &OldProtection); // Restore Protection
}
